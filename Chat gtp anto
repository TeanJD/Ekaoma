# H1 Nää jutut Chat GTPst
Flask + python

1. **Project Setup**:
    - Create a Django project and an app.
    - Install necessary packages (Django, ReportLab).
2. **[models.py](http://models.py/)**:
    - In this case, you might not need models if you're not persisting data to a database.
3. **[forms.py](http://forms.py/)**:
    - Define a form for text input.
4. **[views.py](http://views.py/)**:
    - Implement views for form submission and PDF generation.
5. **[urls.py](http://urls.py/)**:
    - Set up URL patterns for your views.
6. **Templates**:
    - Create HTML templates for the user interface.
7. **Static Files**:
    - Manage any CSS/JavaScript files for your frontend.
8. **Utilities**:
    - Include any additional functions needed, like the one for PDF generation.
9. **Settings and Configuration**:
    - Adjust settings in `settings.py`.



1. **Text Input**: A text area for inputting the initial text.
2. **Prompt Buttons**: Each of the 15 buttons corresponds to a different transformation prompt.
3. **Output Areas**: Three output text areas to display the transformed text.
4. **Editing and Refinement**: The ability to copy text from the output areas back to the input area for further refinement.
5. **Collection and Arrangement**:
    - A mechanism to "save" preferred outputs to a collection area.
    - The ability to order the saved outputs within the collection area.
6. **Export to PDF**:
    - A button to convert the arranged text into a PDF format.
    - The PDF is then downloaded to the user's computer.

a | Name                         | b | Explanation                                                 | c | Step-by-Step Guide                                                                        | d | Example in Code                                                                                                      | e | Popular Problems When Coding                                                           |
---|------------------------------|---|-------------------------------------------------------------|---|-------------------------------------------------------------------------------------------|---|------------------------------------------------------------------------------------------------------------------------|---|-----------------------------------------------------------------------------------------|
1  | Variable Declaration         | 1 | Declaring variables is how you reserve memory in JavaScript | 1 | 1. Use the 'var', 'let', or 'const' keyword.                                             | 1 | ```javascript const myVariable = "Hello, World!"; ```                                                                  | 1 | Forgetting to use 'var', 'let', or 'const' before the variable name.                   |
2  | Data Types                   | 2 | Data types define the nature of the information stored.     | 2 | 1. Strings: Textual data.                                                               | 2 | ```javascript let myString = "Hello, World!"; ```                                                                     | 2 | Misusing data types, e.g., treating a string as a number.                               |
3  | Functions                    | 3 | Functions are reusable blocks of code.                     | 3 | 1. Declare a function using the 'function' keyword.                                      | 3 | ```javascript function greet(name) { return "Hello, " + name + "!"; } ```                                           | 3 | Not returning a value from a function when one is expected.                             |
4  | Conditional Statements       | 4 | Conditional statements execute code based on a condition.   | 4 | 1. Use 'if', 'else if', and 'else' to create conditions.                                 | 4 | ```javascript if (condition) { // code to run when the condition is true } else { // code to run when the condition is false } ``` | 4 | Forgetting to include an 'else' statement for alternative conditions.                  |
5  | Loops                        | 5 | Loops allow you to repeat a block of code multiple times.   | 5 | 1. Use 'for', 'while', or 'do-while' loops.                                              | 5 | ```javascript for (let i = 0; i < 5; i++) { // code to repeat 5 times } ```                                            | 5 | Creating infinite loops without an exit condition.                                     |
6  | Arrays                       | 6 | Arrays store multiple values in a single variable.         | 6 | 1. Declare an array using square brackets.                                              | 6 | ```javascript let myArray = [1, 2, 3, 4, 5]; ```                                                                     | 6 | Accessing array elements with an index that is out of bounds.                          |
7  | Objects                      | 7 | Objects store key-value pairs and represent entities.      | 7 | 1. Create an object using curly braces.                                                 | 7 | ```javascript let person = { name: "John", age: 30, city: "New York" }; ```                                          | 7 | Trying to access a property that does not exist in the object.                         |
8  | Error Handling               | 8 | Error handling prevents crashes and provides feedback.      | 8 | 1. Use 'try', 'catch', and 'finally' for error handling.                                | 8 | ```javascript try { // code that might throw an error } catch (error) { // handle the error } finally { // optional code to run regardless } ``` | 8 | Ignoring error handling, leading to unexpected behavior.                                |
9  | DOM Manipulation             | 9 | Manipulating the DOM allows interaction with web pages.     | 9 | 1. Access elements with 'getElementById', 'getElementsByClassName', or 'querySelector'. | 9 | ```javascript document.getElementById("myElement").innerHTML = "New content"; ```                                    | 9 | Modifying the DOM before it's fully loaded.                                             |
10 | Event Handling               |10 | Event handling responds to user actions on a webpage.       |10 | 1. Attach event listeners with 'addEventListener'.                                       |10 | ```javascript document.getElementById("myButton").addEventListener("click", myFunction); ```                           |10 | Forgetting to remove event listeners, causing memory leaks.                             |

